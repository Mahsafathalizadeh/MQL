//the strategy is about two MA crossing each other(one is slow and the other is fast)
//include
#include <Trade\Trade.mqh>

//input
input int InpFastPeriod = 14;
input int InpSlowPeriod = 21;
input int InpStopLoss = 80;
input int InpTakeProfit = 250;

//global variables
int fastHandle;
int slowHandle;
double fastBuffer[];
double slowBuffer[];
datetime openTimeBuy = 0;
datetime openTimeSell = 0;
CTrade trade;


int OnInit()
  {
    if (InpFastPeriod<=0)
    {
      Alert("the number you entered is <=0 which is not acceptable! Try again.");
      return INIT_PARAMETERS_INCORRECT;
    }
    if (InpSlowPeriod<=0)
    {
      Alert("the number you entered is <=0 which is not acceptable! Try again.");
      return INIT_PARAMETERS_INCORRECT;
    }
    if (InpFastPeriod>=InpSlowPeriod)
    {
      Alert("the fast ma is bigger or equal to slow ma. Try another values.");
      return INIT_PARAMETERS_INCORRECT;
    }

    //create handles
    fastHandle = iMA(_Symbol, PERIOD_CURRENT, InpFastPeriod, 0, MODE_SMA, PRICE_CLOSE);
    if (fastHandle == INVALID_HANDLE)
    {
      Alert("failed to create fast handle");
      return INIT_FAILED;
    }
    slowHandle = iMA(_Symbol, PERIOD_CURRENT, InpSlowPeriod, 0, MODE_SMA, PRICE_CLOSE);
    if (slowHandle == INVALID_HANDLE)
    {
      Alert("failed to create slow handle");
      return INIT_FAILED;
    }
    if (InpStopLoss<=0)
    {
      Alert("sl is <=0");
      return INIT_PARAMETERS_INCORRECT;
    }
    if (InpTakeProfit<=0)
    {
      Alert("tp is <=0");
      return INIT_PARAMETERS_INCORRECT;
    }


    ArraySetAsSeries(fastBuffer,true);
    ArraySetAsSeries(slowBuffer,true);
   return(INIT_SUCCEEDED);
  }

void OnDeinit(const int reason)
  {
    if (fastHandle != INVALID_HANDLE)
    {
      IndicatorRelease(fastHandle);
    }
    if (slowHandle != INVALID_HANDLE)
    {
      IndicatorRelease(slowHandle);
    }
  }

void OnTick()
  {
    int values = CopyBuffer(fastHandle,0,0,2,fastBuffer);
    if (values != 2)
    {
      Print("not enough data for fast MA");
      return;
    }
    values = CopyBuffer(slowHandle,0,0,2,slowBuffer);
    if (values != 2)
    {
      Print("not enough data for slow MA");
      return;
    }
    Comment("fast[0]: ", fastBuffer[0],"\n",
    "fast[1]: ", fastBuffer[1],"\n",
    "slow[0]: ", slowBuffer[0],"\n",
    "slow[1]: ", slowBuffer[1]);

    //check for cross buy
    if (fastBuffer[1]<=slowBuffer[1] && fastBuffer[0]>slowBuffer[0] && openTimeBuy != iTime(_Symbol,PERIOD_CURRENT,0))
    {
      openTimeBuy = iTime(_Symbol,PERIOD_CURRENT,0);
      double ask = SymbolInfoDouble(_Symbol,SYMBOL_ASK);
      double sl = ask - InpStopLoss*SymbolInfoDouble(_Symbol,SYMBOL_POINT);
      double tp = ask + InpTakeProfit*SymbolInfoDouble(_Symbol,SYMBOL_POINT);
      trade.PositionOpen(_Symbol,ORDER_TYPE_BUY, 2, ask,sl,tp,"Cross MA");
    }
    //check for cross sell
    if (fastBuffer[1]>=slowBuffer[1] && fastBuffer[0]<slowBuffer[0] && openTimeSell != iTime(_Symbol,PERIOD_CURRENT,0))
    {
      openTimeSell = iTime(_Symbol,PERIOD_CURRENT,0);
      double bid = SymbolInfoDouble(_Symbol,SYMBOL_BID);
      double sl = bid + InpStopLoss*SymbolInfoDouble(_Symbol,SYMBOL_POINT);
      double tp = bid - InpTakeProfit*SymbolInfoDouble(_Symbol,SYMBOL_POINT);
      trade.PositionOpen(_Symbol,ORDER_TYPE_SELL, 2, bid, sl, tp,"Cross MA");
    }

  }

